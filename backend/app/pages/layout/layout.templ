package layout

import (
    "teamforger/backend/core"
)

templ Notification() {
    <div id="notification" class="position-fixed top-0 start-50 translate-middle-x mt-3" style="z-index: 1050; display: none; min-width: 300px; max-width: 80%;">
        <div class="alert alert-dismissible fade show" role="alert" style="box-shadow: 0 4px 12px rgba(0,0,0,0.15);">
            <span id="notification-message"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

templ Base(isLoggedIn bool, user core.User, content templ.Component) {
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>TeamForger</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
        <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
        <style>
            body {
                background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
                min-height: 100vh;
                color: #333;
            }
            .card {
                border-radius: 15px;
                box-shadow: 0 10px 20px rgba(0,0,0,0.1);
                border: none;
            }
            .btn-primary {
                background: linear-gradient(to right, #6a11cb, #2575fc);
                border: none;
            }
            .navbar {
                background: rgba(255, 255, 255, 0.9);
                backdrop-filter: blur(10px);
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            .form-control:focus {
                border-color: #6a11cb;
                box-shadow: 0 0 0 0.25rem rgba(106, 17, 203, 0.25);
            }
        </style>
    </head>
    <body>
        <nav class="navbar navbar-expand-lg navbar-light">
            <div class="container">
                <a class="navbar-brand fw-bold text-primary" href="/">
                    <i class="bi bi-people-fill me-2"></i>TeamForger
                </a>
                <div class="collapse navbar-collapse">
                    <ul class="navbar-nav ms-auto">
                        if isLoggedIn {
                            <li class="nav-item">
                                <a class="nav-link" href="/home">
                                    <i class="bi bi-house-door me-1"></i>Home
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/signout">
                                    <i class="bi bi-box-arrow-right me-1"></i>Sign Out
                                </a>
                            </li>
                        } else {
                            <li class="nav-item">
                                <a class="nav-link" href="/signin">
                                    <i class="bi bi-box-arrow-in-right me-1"></i>Sign In
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/signup">
                                    <i class="bi bi-person-plus me-1"></i>Sign Up
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
        
        @Notification()
        
        <main class="container py-5">
            <div class="row justify-content-center">
                @content
            </div>
        </main>
        
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"></script>
        <script>
            // Message mappings
            const successMessages = {
                accountCreated: "Account created successfully!",
                welcomeBack: "Welcome back!",
                signedOut: "You have been signed out.",
                CVConverted: "CV uploaded and converted successfully!"
            };
            
            const errorMessages = {
                databaseError: "Database error. Please try again later.",
                cookieError: "Cookie error. Please sign in again.",
                tokenGenerationFailed: "Failed to generate tokens. Please try again.",
                tokenUpdateFailed: "Failed to update tokens. Please try again.",
                emailNotFound: "Email not found.",
                wrongPassword: "Incorrect password.",
                duplicateEmail: "Email already in use.",
                createAccountError: "Failed to create account. Please try again.",
                fileUploadError: "File upload failed. Please try again.",
                docxConversionError: "Failed to convert DOCX file.",
                cvStorageFailed: "Failed to store CV. Please try again.",
                notAdmin: "You must be an administrator to access this page.",
                tokenClearFailed: "Failed to clear session tokens."
            };
            
            document.addEventListener('DOMContentLoaded', function() {
                const urlParams = new URLSearchParams(window.location.search);
                const notification = document.getElementById('notification');
                const messageSpan = document.getElementById('notification-message');
                const alertDiv = notification.querySelector('.alert');
                
                // Check for success message
                const successParam = urlParams.get('success');
                if (successParam && successMessages[successParam]) {
                    messageSpan.textContent = successMessages[successParam];
                    alertDiv.classList.add('alert-success');
                    notification.style.display = 'block';
                    
                    // Auto-hide after 5 seconds
                    setTimeout(() => {
                        notification.style.display = 'none';
                    }, 5000);
                }
                
                // Check for error message
                const errorParam = urlParams.get('error');
                if (errorParam && errorMessages[errorParam]) {
                    messageSpan.textContent = errorMessages[errorParam];
                    alertDiv.classList.add('alert-danger');
                    notification.style.display = 'block';
                }
                
                // Close button handler
                notification.querySelector('.btn-close').addEventListener('click', function() {
                    notification.style.display = 'none';
                });
                
                // Remove query params from URL without reloading
                const cleanUrl = window.location.protocol + "//" + window.location.host + window.location.pathname;
                window.history.replaceState({}, document.title, cleanUrl);
            });
        </script>
    </body>
    </html>
}
