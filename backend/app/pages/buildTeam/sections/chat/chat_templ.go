// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.887
package chat

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"teamforger/backend/core"
)

func Chat(user core.User) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"col-md-12 col-lg-12\"><div class=\"card p-4\"><div class=\"d-flex flex-column h-100\"><!-- Full-height chat container --><div id=\"chat-messages\" class=\"flex-grow-1 overflow-auto p-4 bg-light rounded mb-3\" style=\"height: 70vh;\"><!-- Placeholder that will disappear after first message --><div id=\"chat-placeholder\" class=\"text-center text-muted py-4\">Start chatting with your team building assistant...</div></div><div class=\"d-flex mt-auto\"><!-- Full-width input field --><input type=\"text\" id=\"chat-input\" class=\"form-control me-2 p-3\" placeholder=\"Type your message...\" style=\"font-size: 1.2rem;\"><!-- Larger button --><button class=\"btn btn-primary px-4 py-3\" id=\"send-button\" style=\"font-size: 1.2rem; min-width: 120px;\">Send</button></div></div></div></div><script>\n\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\tconst chatInput = document.getElementById('chat-input');\n\t\t\tconst sendButton = document.getElementById('send-button');\n\t\t\tconst chatMessages = document.getElementById('chat-messages');\n\t\t\tconst chatPlaceholder = document.getElementById('chat-placeholder');\n\t\t\t\n\t\t\tlet socket = null;\n\t\t\tlet currentAssistantMessage = null;\n\t\t\tlet assistantMessageContent = '';\n\t\t\tlet reconnectAttempts = 0;\n\t\t\tconst maxReconnectAttempts = 5;\n\t\t\tconst reconnectDelayBase = 1000; // 1 second\n\t\t\t\n\t\t\tfunction connectWebSocket() {\n\t\t\t\tconst protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n\t\t\t\tsocket = new WebSocket(protocol + '//' + window.location.host + '/ws');\n\t\t\t\t\n\t\t\t\tsocket.onopen = function() {\n\t\t\t\t\treconnectAttempts = 0;\n\t\t\t\t\tconsole.log('WebSocket connection established');\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tsocket.onmessage = function(event) {\n\t\t\t\t\tconst message = event.data;\n\t\t\t\t\t\n\t\t\t\t\t// Handle ping requests from server\n\t\t\t\t\tif (message === \"ping\") {\n\t\t\t\t\t\tsocket.send(\"pong\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Remove placeholder on first message\n\t\t\t\t\tif (chatPlaceholder) {\n\t\t\t\t\t\tchatPlaceholder.remove();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Create new assistant message if none exists\n\t\t\t\t\tif (!currentAssistantMessage) {\n\t\t\t\t\t\tcurrentAssistantMessage = document.createElement('div');\n\t\t\t\t\t\tcurrentAssistantMessage.className = 'assistant-message mb-3';\n\t\t\t\t\t\tchatMessages.appendChild(currentAssistantMessage);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Append content\n\t\t\t\t\tassistantMessageContent += message;\n\t\t\t\t\tcurrentAssistantMessage.innerHTML = marked.parse(assistantMessageContent);\n\t\t\t\t\t\n\t\t\t\t\t// Scroll to bottom\n\t\t\t\t\tchatMessages.scrollTop = chatMessages.scrollHeight;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tsocket.onclose = function(event) {\n\t\t\t\t\tconsole.log('WebSocket closed:', event);\n\t\t\t\t\tattemptReconnect();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tsocket.onerror = function(error) {\n\t\t\t\t\tconsole.error('WebSocket error:', error);\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\tfunction attemptReconnect() {\n\t\t\t\tif (reconnectAttempts >= maxReconnectAttempts) {\n\t\t\t\t\tconsole.error('Max reconnect attempts reached');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst delay = reconnectDelayBase * Math.pow(2, reconnectAttempts);\n\t\t\t\treconnectAttempts++;\n\t\t\t\t\n\t\t\t\tconsole.log(`Attempting reconnect in ${delay}ms (attempt ${reconnectAttempts}/${maxReconnectAttempts})`);\n\t\t\t\t\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconsole.log('Reconnecting...');\n\t\t\t\t\tconnectWebSocket();\n\t\t\t\t}, delay);\n\t\t\t}\n\t\t\t\n\t\t\tfunction sendMessage() {\n\t\t\t\tconst message = chatInput.value.trim();\n\t\t\t\tif (message && socket && socket.readyState === WebSocket.OPEN) {\n\t\t\t\t\t// Remove placeholder\n\t\t\t\t\tif (chatPlaceholder) {\n\t\t\t\t\t\tchatPlaceholder.remove();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Reset assistant message tracking\n\t\t\t\t\tcurrentAssistantMessage = null;\n\t\t\t\t\tassistantMessageContent = '';\n\t\t\t\t\t\n\t\t\t\t\t// Add user message to UI\n\t\t\t\t\tconst userMessageDiv = document.createElement('div');\n\t\t\t\t\tuserMessageDiv.className = 'user-message mb-3 text-end';\n\t\t\t\t\tuserMessageDiv.innerHTML = marked.parse(`**You:** ${message}`);\n\t\t\t\t\tchatMessages.appendChild(userMessageDiv);\n\t\t\t\t\t\n\t\t\t\t\t// Send message via WebSocket\n\t\t\t\t\tsocket.send(message);\n\t\t\t\t\t\n\t\t\t\t\t// Clear input\n\t\t\t\t\tchatInput.value = '';\n\t\t\t\t\t\n\t\t\t\t\t// Scroll to bottom\n\t\t\t\t\tchatMessages.scrollTop = chatMessages.scrollHeight;\n\t\t\t\t\t\n\t\t\t\t\t// Focus input for next message\n\t\t\t\t\tchatInput.focus();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Send on button click\n\t\t\tsendButton.addEventListener('click', sendMessage);\n\t\t\t\n\t\t\t// Send on Enter key\n\t\t\tchatInput.addEventListener('keypress', function(e) {\n\t\t\t\tif (e.key === 'Enter') {\n\t\t\t\t\tsendMessage();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Initialize WebSocket connection\n\t\t\tconnectWebSocket();\n\t\t\t\n\t\t\t// Focus input on load\n\t\t\tchatInput.focus();\n\t\t});\n\t</script><style>\n\t\t/* Improved chat styling */\n\t\t#chat-messages {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tgap: 1.5rem;\n\t\t\tfont-size: 1.2rem;\n\t\t\tline-height: 1.8;\n\t\t}\n\t\t\n\t\t.user-message div, .assistant-message div {\n\t\t\tpadding: 1.2rem;\n\t\t\tborder-radius: 12px;\n\t\t\tdisplay: inline-block;\n\t\t\tmax-width: 90%;\n\t\t}\n\t\t\n\t\t.user-message div {\n\t\t\tbackground: linear-gradient(to right, #6a11cb, #2575fc);\n\t\t\tcolor: white;\n\t\t\tborder-bottom-right-radius: 4px;\n\t\t}\n\t\t\n\t\t.assistant-message div {\n\t\t\tbackground-color: #f8f9fa;\n\t\t\tborder: 1px solid #dee2e6;\n\t\t\tborder-bottom-left-radius: 4px;\n\t\t}\n\t\t\n\t\t/* Markdown styling */\n\t\t#chat-messages p {\n\t\t\tmargin-bottom: 0.8rem;\n\t\t}\n\t\t\n\t\t#chat-messages h1, \n\t\t#chat-messages h2, \n\t\t#chat-messages h3 {\n\t\t\tmargin-top: 1.5rem;\n\t\t\tmargin-bottom: 1rem;\n\t\t}\n\t\t\n\t\t#chat-messages ul, \n\t\t#chat-messages ol {\n\t\t\tpadding-left: 2rem;\n\t\t\tmargin-bottom: 1rem;\n\t\t}\n\t\t\n\t\t#chat-messages li {\n\t\t\tmargin-bottom: 0.5rem;\n\t\t}\n\t\t\n\t\t#chat-messages code {\n\t\t\tbackground-color: #e9ecef;\n\t\t\tpadding: 0.3rem 0.5rem;\n\t\t\tborder-radius: 6px;\n\t\t\tfont-family: monospace;\n\t\t\tfont-size: 1.1rem;\n\t\t}\n\t\t\n\t\t#chat-messages pre {\n\t\t\tbackground-color: #2d2d2d;\n\t\t\tcolor: #f8f8f2;\n\t\t\tpadding: 1rem;\n\t\t\tborder-radius: 6px;\n\t\t\toverflow-x: auto;\n\t\t\tmargin-bottom: 1.5rem;\n\t\t}\n\t\t\n\t\t#chat-messages pre code {\n\t\t\tbackground-color: transparent;\n\t\t\tpadding: 0;\n\t\t}\n\t</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
